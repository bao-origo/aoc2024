#!/usr/bin/env ruby
require_relative 'aoc'
input = AOC.read(8)

# Build map of antennas from input.
map = input.split
rows = map.size
columns = map[0].size

# Find the position of all antennas, group them by name and use it to map the antinodes.
antennas = {}
map.each_with_index do |line, i|
  line.each_char.with_index do |c, j|
    if c =~ /^[a-zA-Z0-9]$/
      antennas[c] = [] if antennas[c].nil?
      antennas[c] << [i, j]
    end
  end
end

# Find positions of all antinodes.
require 'set'
antinodes = Set.new
antennas.each do |key, resonant_antennas|
  resonant_antennas.each_with_index do |antenna1, i1|
    resonant_antennas.each_with_index do |antenna2, i2|
      next if i1 == i2
      diff = [antenna1[0] - antenna2[0], antenna1[1] - antenna2[1]]
      ai, aj = antenna1[0] + diff[0], antenna1[1] + diff[1]
      next if ai < 0 or aj < 0 or rows <= ai or columns <= aj
      antinodes << [ai, aj] if antennas.all? { |key, value| !value.include?([ai, aj]) }
      loop do
        ai += diff[0]
        aj += diff[1]
        break if ai < 0 or aj < 0 or rows <= ai or columns <= aj
        antinodes << [ai, aj] if antennas.all? { |key, value| !value.include?([ai, aj]) }
      end
    end
  end
end

# Print out unique locations within the bounds of the map that contain an antinode.
puts antinodes.length + (antennas.reduce(0) {|sum, (name, positions)| sum + positions.size })
