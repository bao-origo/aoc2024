#!/usr/bin/env ruby
require_relative 'aoc'
input = AOC.read(5)

$rules = input.split("\n\n")[0].split("\n").map{|rule| rule.split("|")}
updates = input.split("\n\n")[1].split("\n").map{|update| update.split(",")}

# Get middle page index.
def middle_index(update)
  (update.length / 2).floor
end

# Get middle page number.
def middle_number(update)
  update[middle_index(update)]
end

# Check if the update is in the correct order.
def correct?(update)
  $rules.each do |rule|
    # Check if both numbers in the rule exists in the update.
    next unless rule.all? {|num| update.include?(num)}

    # Check if the update obeys the rule.
    ok = false
    _p = 0
    update.each do |page|
      if page == rule[_p]
        _p += 1
        ok = true if _p == 2
      end
    end
    return false unless ok
  end
  return true
end

incorrects = []
updates.each do |update|
  incorrects << update unless correct?(update)
end

# Correct incorrect update.
def correct(incorrect)
  update = incorrect.dup
  loop do
    _retry = false
    $rules.each do |rule|
      # Check if both numbers in the rule exists in the update.
      next unless rule.all? {|num| update.include?(num)}

      # Check if the update obeys the rule.
      ok = false
      _p = 0
      update.each do |page|
        if page == rule[_p]
          _p += 1
          ok = true if _p == 2
        end
      end

      # Check if the update is breaking the rules.
      unless ok
        # update is rule-breaking.

        # Correct rule-breaking update.
        indices = rule.map { |num| update.index(num) }
        update[indices[0]], update[indices[1]] = update[indices[1]], update[indices[0]]
        _retry = true
      end
    end
    break unless _retry
  end
  return update
end

sum = 0
incorrects.each do |incorrect|
  sum += middle_number(correct(incorrect)).to_i
end
puts sum
