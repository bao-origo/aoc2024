#!/usr/bin/env ruby
require_relative 'aoc'
#input = AOC.read(9).strip
input = "2333133121414131402"

$files = []
j = 0
input.each_char.with_index do |n, i|
  if i.even? # n block file.
    $files << Array.new(n.to_i) { j.to_s }
    j += 1
  else # free block space.
    next if n.to_i == 0
    $files << Array.new(n.to_i) { '.' }
  end
end

def debugp
  $files.flatten.each { |c| print c }
  print "\n"
end

def debugw
  File.open("sorted.txt", "w") do |file|
    $files.flatten.each { |c| file.print c }
    file.print "\n"
  end
end

def come_together(array)
  # Initialize an empty array to hold the grouped elements
  grouped = []

  # Initialize a temporary array to hold the current group
  current_group = []

  array.each do |element|
    if current_group.empty? || current_group.last == element
      # If the current group is empty or the last element is the same, add to the current group
      current_group << element
    else
      # If the last element is different, push the current group to the grouped array and start a new group
      grouped << current_group
      current_group = [element]
    end
  end

  # Don't forget to add the last group to the grouped array
  grouped << current_group unless current_group.empty?

  return grouped
end

last_j = nil
catch :done do
  loop do
    catch :retry do
      ($files.length-1).downto(0).each do |j|
        file_j = $files[j]
        next if file_j[0] == '.'
        (0...j).each do |i|
          file_i = $files[i]
          next if file_i[0] != '.' or file_i.length < file_j.length
          file_j.each_with_index do |value, index|
            file_i[index] = value
          end
          #dot_index = file_i.index(".")
          file_j.fill('.')
          $files = come_together($files.flatten)
          p $files
          last_j = j
          #throw :retry if dot_index.nil?
          #$files[i] = file_i[0...dot_index]
          #$files.insert(i+1, file_i[dot_index..dot_index])
          throw :retry
        end
        last_j = j
        throw :done if j == 0
      end
    end
    puts "j: #{last_j}"
  end
end

debugw
File.open("sorted_ds.txt", "w") do |file|
  $stdout = file
  p $files
  $stdout = STDOUT
end
File.open("sorted_ds_flatten.txt", "w") do |file|
  $stdout = file
  p $files.flatten
  $stdout = STDOUT
end

puts ($files.flatten.each.with_index.reduce(0) { |result, (c, i)| c == '.' ? result : (result + (i * c.to_i)) })
