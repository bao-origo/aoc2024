#!/usr/bin/env ruby
puts "TODO"
exit

require_relative 'aoc'
input = AOC.read(4)

matrix = input.split("\n")

# Get the number of rows and columns.
rows = matrix.size
cols = matrix[0].size

#########################################################################################
# YOU'RE ENTERING THE MATRIX                                                            #
# YOUR LIFE IS A LIE MADE BY AN AUTONOMOUS AI USING YOU AS A DURACELL BATTERY FOR POWER #
# (https://www.youtube.com/watch?v=O5b0ZxUWNf0)                                         #
# WAKE UP                                                                               #
# (and learn kung fu)                                                                   #
#########################################################################################

# Initialize an array to hold lines.
lines = []

def read_diagonally_topleft_bottomright(lines)
  diagonals = []
  n = lines.length
  m = lines[0].length

  # Read from top-left to bottom-right diagonals
  (0...n).each do |start_row|
    row, col = start_row, 0
    diagonal = ""
    while row < n && col < m
      diagonal << lines[row][col]
      row += 1
      col += 1
    end
    diagonals << diagonal
  end

  (1...m).each do |start_col|
    row, col = 0, start_col
    diagonal = ""
    while row < n && col < m
      diagonal << lines[row][col]
      row += 1
      col += 1
    end
    diagonals << diagonal
  end

  diagonals
end

lines = lines + read_diagonally_topleft_bottomright(matrix)
lines = lines + read_diagonally_topleft_bottomright(matrix).map {|line| line.reverse}

def read_diagonally_top_right_to_bottom_left(lines)
  diagonals = []
  n = lines.length
  m = lines[0].length

  # Read from top-right to bottom-left diagonals
  (0...n).each do |start_row|
    row, col = start_row, m - 1
    diagonal = ""
    while row < n && col >= 0
      diagonal << lines[row][col]
      row += 1
      col -= 1
    end
    diagonals << diagonal
  end

  (0...m - 1).each do |start_col|
    row, col = 0, start_col
    diagonal = ""
    while row < n && col >= 0
      diagonal << lines[row][col]
      row += 1
      col -= 1
    end
    diagonals << diagonal
  end

  diagonals
end

lines = lines + read_diagonally_top_right_to_bottom_left(matrix)
lines = lines + read_diagonally_top_right_to_bottom_left(matrix).map {|line| line.reverse}

# Read row lines.
matrix.each do |line|
  lines << line
  lines << line.reverse
end

# Read column lines.
(0...cols).each do |col|
  column = []
  (0...rows).each do |row|
    column << matrix[row][col]
  end
  lines << column.join
  lines << column.join.reverse
end

# Count the number of XMAS.
count = 0
lines.each do |line|
  count += line.scan(/XMAS/).size
end
puts count
